---
# tasks file for setup-ssh-keys

- name: make ssh file directory
  file: path={{ APP_BASE_DIR }}/extras/ssh/ state=directory

- name: Test the id_rsa_path exists
  local_action:
    module: stat
    path: "{{ SSH_PRIV_KEY }}"
  register: id_rsa_path

- name: Test the id_rsa_pub_path exists
  local_action:
    module: stat
    path: "{{ SSH_PUB_KEY }}"
  register: id_rsa_pub_path

- name: Set CREATE_SSH True if either id_rsa_path/id_rsa_pub_path *do not exist*
  set_fact: CREATE_SSH={{ not id_rsa_path.stat.exists or not id_rsa_pub_path.stat.exists }}

########################################
# Tasks related to ssh keys being given
########################################
- block:

  - name: move over id_rsa private key
    copy: src={{ SSH_PRIV_KEY }} dest={{ APP_BASE_DIR }}/extras/ssh/{{ SSH_PRIV_NAME }}

  - name: move over id_rsa public key
    copy: src={{ SSH_PUB_KEY }} dest={{ APP_BASE_DIR }}/extras/ssh/{{ SSH_PUB_NAME }}

  - name: set ssh priv key to the destination file above
    set_fact: ATMO_SSH_PRIV_KEY={{ APP_BASE_DIR }}/extras/ssh/{{ SSH_PRIV_NAME }}

  - name: set ssh public key to the destination file above
    set_fact: ATMO_SSH_PUB_KEY={{ APP_BASE_DIR }}/extras/ssh/{{ SSH_PUB_NAME }}

  when: not CREATE_SSH

###########################################
# Tasks related to ssh keys not being given
###########################################
- block:

  - name: Create a 2048-bit SSH key for user root in {{ APP_BASE_DIR }}/extras/ssh/
    user: name=root generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file={{ APP_BASE_DIR }}/extras/ssh/{{ CREATED_SSH_KEY_NAME }} # default is id_rsa

  - name: set ssh priv key var if they do not supply one
    set_fact: ATMO_SSH_PRIV_KEY={{ APP_BASE_DIR }}/extras/ssh/{{ CREATED_SSH_KEY_NAME }}

  - name: set ssh public key var if they do not supply one
    set_fact: ATMO_SSH_PUB_KEY={{ APP_BASE_DIR }}/extras/ssh/{{ CREATED_SSH_KEY_NAME }}.pub

  when: CREATE_SSH

###########################################
# Genereate ssh config when file doesn't exist
###########################################
- name: Test the ssh_config exists
  stat: path="/root/.ssh/config"
  register: ssh_config_path

- name: template over system's ssh config
  template: src=ssh_config.j2 dest=/root/.ssh/config backup=yes
  when: not ssh_config_path.stat.exists

- name: Test the ssh_config exists again
  stat: path="/root/.ssh/config"
  register: ssh_config_path

- name: Write the block that is required for atmosphere
  blockinfile:
    dest: "/root/.ssh/config"
    marker: "# {mark} ANSIBLE MANAGED BLOCK "
    block: |
      Host *
        IdentityFile "{{ APP_BASE_DIR }}/extras/ssh/{{ ATMO_SSH_PRIV_KEY | basename | default('id_rsa') }}"
        StrictHostKeyChecking no
        UserKnownHostsFile=/dev/null
  when: ssh_config_path.stat.exists

